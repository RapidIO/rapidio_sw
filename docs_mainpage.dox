/** \mainpage RapidIO Remote Memory Access Platform (RRMAP)  Overview
 *
 * The RapidIO Remote Memory Access Platform uses the Linux kernel RapidIO
 * character mode driver interfaces to provide performance 
 * optimized, portable high performance communication capabilities for
 * a heterogenous computing environment.  There are two main facilities:
 * - Remote Memory Access (RMA), which allows "socket style" connect/accept,
 *   read/write, and close communication for a shared memory regiont, and
 * - RMA Sockets, which provides a "socket style" "stream of bytes" interface
 *   using an RMA bounded buffer.
 * For applications that require a complete network stack, RRMAP provides 
 * the DmaTun component to transport IP frames over a
 * RapidIO network.
 *
 * The RRMAP stack also provides a user mode driver (UMD) for the Tsi721
 * PCIe-to-RapidIO bridge device. The user mode driver reduces transmission
 * latency for both messaging and DMA transfers.
 *
 * RRMAP provides fabric management capabilities for the
 * RapidIO network.  Fabric management manages the nodes in the RapidIO 
 * network, including hot swap and fault handling.  It also manages 
 * what applications are available on each node, allowing applications to know
 * when a peer has appeared (or disappeared) in the network.
 *
 * Two utilities are also provided:
 * - Goodput - performance measurement of the RapidIO fabric and UMD
 * - File Transfer - performs file transfer over a RapidIO network using
 *   messaging to coordinate DMA transfers between multiple clients and
 *   servers.
 *
 * Public interfaces are found in rapidio_sw/include:
 * - libfmdd.h : Interfaces for the fabric management daemon.  Use these to
 *               confirm what nodes are available in the system, and what
 *               facilities (Remote Memory Access, RMA Sockets) are available
 *               on each node.
 * - librdma.h : Interfaces for Remote Memory Access
 * - rdma_types.h : Type definitions for librdma.h
 * - librskt.h : RMA Sockets implementation of socket-style (stream of bytes)
 *               transfers.
 * - mboxmgr_tsi721.h : Tsi721 User mode driver for dedicated messaging
 *                      resources.
 *
 * Precompiled libraries associated with the interfaces are found in:
 * - Static linking: /opts/rapidio/rapidio_sw/include/libs_a 
 * - Shared library: /opts/rapidio/include/libs_so
 * Applications may use
 * these interfaces to incorporate the RRMAP capabilities listed above.
 *
 * All public interfaces are documented.
 * Refer to the "Files" tab for more details.
 *
 * \section install_sec Installation
 *
 * Automatic installation has been tested on systems with up to four nodes,
 * and a single switch.  
 *
 * Installation depends upon the following:
 *
 * - ssh been configured to allow root access to all four nodes      
 * - The 'screen' utility has been installed on all four nodes
 * - The 'doxygen' utility has been installed on all four nodes
 * - The 'gcc-c++' package has been installed on all four nodes.
 *   Requires version 4.7 or later.
 *
 * Installation is a two step process:
 * -# Unpack the RapidIO software on any of the four nodes.
 *   - This should create a rapidio_sw directory
 *
 * -# Execute the rapidio_sw/install.sh script as follows:
 *   - install.sh (NODE1) (NODE2) (NODE3) (NODE4) (memsz) (group)
 *     - (NODE1) Name of master, enumerating node
 *     - (NODE2) Name of slave node connected to Switch Port 2
 *     - (NODE3) Name of slave node connected to Switch Port 3
 *     - (NODE4) Name of slave node connected to Switch Port 4
 *     - If any of (NODE2) (NODE3) (NODE4) is "none", 
 *       the node is ignored.
 *     - (memsz) RapidIO system memory address size
 *       - Valid values are mem34, mem50, mem66
 *         - mem34 : all (NODEn) have 8 GB of addressable memory or less
 *         - mem50 : all (NODEn) have 2 TB of addressable memory or less
 *         - mem66 : all (NODEn) have 2 PB of addressable memory or less
 *     - (group) Unix file ownership group which should have access to
 *       the RapidIO software
 * 
 * The installation script creates the following configuration files in
 * /etc/rapidio:
 *
 * - fmd.conf - On the master node, fmd.conf contains configuration information 
 *              for the entire system, includeing the switch and slave nodes.
 *              On the slave nodes, fmd.conf contains configuration information
 *              that allows the slave Fabric Management Daemon to contact the
 *              master fabric management daemon.  For 
 *              more information, refer to \ref stack_fmd.
 * - nodelist.sh - List of nodes in the system.  Used by many scripts to 
 *              determine what devices are available for demonstrations,
 *              including the start and stop scripts described in
 *              \ref execution_sec.
 * - umdd.conf - Configuration information for Tsi721 User Mode Driver
 *            DMA and MBOX channels.  For more information, refer to 
 *            \ref stack_umd_mbox  and \ref stack_umd_dma.
 *
 * \section execution_sec Starting and Stopping RRMAP
 *
 * Scripts to start and stop RRMAP components are created by the install.sh
 * script in the /opt/rapidio/rapidio_sw directory on each node.
 *
 * RRMAP supports two component configurations:
 * - Kernel Only: The kernel only configuration supports execution of the 
 *   Goodput and File Transfer utilties.  The Tsi721 DMA UMD may optionally
 *   be started to transparently increase DMA performance for both of these
 *   utilities.
 * - RRMAP Stack: The RRMAP stack includes \ref stack_fmd Fabric Management, 
 *   \ref stack_rma RMA,
 *   \ref stack_rskt RMA Sockets,
 *   \ref stack_umd_dma Tsi721 DMA UMD, and 
 *   \ref stack_dma_tun DmaTun 
 *
 * Use the check_all.sh script to determine the component status 
 * of each installed node.
 *
 * \subsection kernel_config Kernel Only
 *
 * The "kernel only" configuration must be used for the Goodput and
 * file transfer utilities.  The RRMAP stack is not started, as it would
 * interfere with the operation of both goodput and file transfer.
 *
 * To start the "kernel only" configuration,
 * execute the rio_start.sh script
 *
 * To halt the "kernel only" configuration, use one of the following
 * scripts:
 * - ./stop_rio.sh - removes access to DMA and messaging
 * - ./all_down.sh - powers down all nodes 
 *
 * Goodput and file transfer can use the Tsi721 User Mode Driver for DMA
 * transactions.  To start the Tsi721 User Mode Driver, execute the 
 * umd721_start.sh script.
 *
 * Refer to \ref goodput_docs goodput for information on 
 * starting the goodput utility.
 *
 * The fxfr_start.sh script will start file transfer servers on all nodes
 * execute demonstration transfers.
 * The stop_fxfr.sh script halts the file transfer server on all nodes.
 * 
 * \subsection rrmap_exec RRMAP Stack
 *
 * To start the RRMAP stack, execute the following scripts:
 * -# ./rio_start.sh noenum
 * -# ./all_start.sh 
 *
 * All_start.sh starts RRMAP fabric management, RMA, and RMA Sockets. If a
 * Tsi721 device is present, all_start.sh also launches the Tsi721 DMA User Mode
 * Driver, and the DmaTun IP transport utility.
 * 
 * To halt the RRMAP stack configuration, use one of the following
 * scripts:
 * - ./stop_all.sh - terminates Fabric Management, RMA, RMA Sockets, 
 *                   Tsi721 User Mode Driver, and DmaTun.
 * - ./all_down.sh - powers down all nodes 
 *
 * \section uninstall_sec Uninstall RRMAP Software
 *
 * To remove the RRMAP software from a node, execute the 
 * /opt/rapidio/rapidio_sw/uninstall.sh script.  This will delete the
 * /opt/rapidio/rapidio_sw and /etc/rapidio directories.
 *
 * \page stack_fmd RRMAP Fabric Management Overview
 *
 * \section fabric_management Fabric Management 
 *
 * Fabric management is implemented in the Fabric Management Daemon (FMD)
 * RRMAP stack process.  One FMD must be running on each node in the system.
 * The master FMD, running on the master node,
 * is responsible for enumerating and managing the 
 * RapidIO network.  The slave FMDs, running on all other nodes, inform
 *  the master FMD when applications register and exit.
 *
 * The FMD allows applications to be notified when 
 * an application enters or leaves the system.  A slave FMD
 * learns that an application has left the system when the AF_UNIX
 * connection to the application fails.  The slave FMD
 * informs the master FMD of the change.  The
 * master Fabric Management Daemon then informs all slave Fabric Management
 * Daemons of the change.  The slave Fabric Management Daemons in turn 
 * notify the local applications of the change.
 *
 * A similar sequence of communication occurs when an application enters the
 * system and incorporates the libfmdd library.
 *
 * RMA and RMA Sockets are dependent upon the FMD running on their node. 
 * The RMA Daemon and RMA Sockets applications
 * register with the FMD on startup, and receive events
 * informing them of the appearance and disappearance of nodes and
 * applications on other
 * nodes.
 *
 * Refer to the include/libfmdd.h file reference for interface details.
 * Example code for registering with and managing Fabric Management Daemon
 * events is found in rapidio_sw/rdma/rskt/daemon/src/librsktd_fm.c
 *
 * \subsection fabric_management_details Fabric Management Daemon Details
 *
 * The master Fabric Management Daemon initializes switch routing tables 
 * and other switch and endpoint configuration details on startup.  The 
 * slave Fabric Management Daemons use Channelized Messaging (rio_cm kernel
 * module) to connect to the Master Fabric Management Daemons.  Once this
 * connection is successful, the slave Fabric Management Daemons are informed 
 * of changes in the system. 
 *
 * The Slave Fabric Management Daemons will not allow applications to connect
 * to it until it has connected to the Master Fabric Management Daemon.
 * 
 * \page stack_rma RRMAP Remote Memory Access
 *
 * \section remote_memory_access Remote Memory Access (RMA)
 *
 * The Remote Memory Access component is implemented in a Remote Memory Access
 * Daemon (RMAD) process which runs on each node in the system, and a 
 * Remote Memory Access library that is bound into each application that 
 * wants to use its interfaces.  The libary connects to the RMAD for RMAD
 * services.  The RMAD
 * is responsible for managing memory on the node, managing connections 
 * to that memory, and
 * ensuring that when a connection is closed or broken that all accesses to
 * the memory are cleaned up before the memory is used by another 
 * application.
 *
 * The include/librdma.h defines the interfaces supported 
 * by the RMA library.  The RMA library uses three concepts to manage memory:
 * - Memory space owner: A unique identifier for a memory owner
 * - Memory space: A unique identifier for a memory space.  A memory space is
 *   an area of memory that can be written remotely from another node over a 
 *   RapidIO network.  Every memory space is associated with a memory space
 *   owner.
 * - Memory subspace: A portion of a memory space.  There are no rules around
 *   how a memory subspace is defined, except that it must be wholely
 *   contained within a single memory space.  Connections are made or broken
 *   with memory subspaces.
 *
 * The RMA Daemon is responsible for managing accesses to memory spaces/
 * subspaces.  Memory space owner handles and memory space/subspace handles 
 * may be passed between processes.  Typically, an "owner" process is
 * responsible for
 * creating the memory space owner handles and memory space handles.
 * An "owner" process tells a "user" process what memory space owner handles
 * and memory spaces it can access.  The method for communication is up to the
 * implementer.
 * 
 * Two "user" processes can transfer data through memory subspaces after the
 * memory subspaces have been connected.  Memory space connections are formed
 * using socket-like semantics with the 
 * interfaces rdma_connect and rdma_accept.
 *
 * Once a connection is made, data can be written to or read from a remote 
 * memory subspace. The source of the written data and the recepticle for the
 * read data can be either a local memory subspace or a local memory buffer.
 *
 * The reads and writes (pulls and pushes) can use three distinct
 * synchronization styles:
 * - Synchronous: Execution does not continue until the transfer is completed.
 *   Note that written data may still be in flight through the network after
 *   the transaction is "completed", depending on the underlying hardware.
 * - Asynchronous: Execution continues separately.  At a later time, the
 *   process may check that the transfer has completed.
 * - Fire and forget: There is no notification when a transfer has completed.
 *   Transfer completion must be detected based on changes in memory.
 *
 * The RMA Daemon is informed when a process dies, and cleans up
 * all memory space/subspace accesses and connections for process.
 *
 * Refer to the include/librdma.h for interface details for
 * the Remote Memory Access component.
 * Example code for the RMA interfaces is found at
 * rapidio_sw/rdma/samples/src.
 *
 * \page stack_rskt RRMAP Remote Memory Access Sockets
 *
 * \section rdma_sockets RMA Sockets (RSKT)
 *
 * RMA Sockets implements a socket style interface using RMA to manage
 * bounded buffers.  RMA Sockets are implemented in a RMA Sockets daemon 
 * process which manages sockets and connections, and a library which can
 * be integrated into applications.   
 *
 * RMA Sockets is dependent on the Fabric Management Daemon, and on the 
 * Remote Memory Access Daemon.  
 *
 * The number and throughput of sockets supported varies with the buffer size
 * and total memory allocated by the RMA Socket daemon.  These quantities are
 * controlled by the following RMA Socket daemon command line parameters:
 *
 * - -s (num_spaces): Number of memory spaces to use. Maximum is 64.
 * - -S (size): Size in kilobytes of memory spaces to request.  Valid values are
 *            128, 256, 512, 1024, and 2048
 * - -k (size): Size of rskt socket buffers in kilobytes.  Valid values are
 *            2, 4, 8, 16, 32, 64, and 128. Must be less than -s value.
 *
 * Note that the maximum possible single transfer for a socket is 16 bytes 
 * less than half the -k (size) value.
 *
 * Refer to the librskt.h for 
 * interface details.  For RMA Sockets code examples, refer to
 * rapidio_sw/rdma/rskt/daemon/src, rskt_server.c and rskt_client.c.
 * These two files implement a server with accepts multiple connections,
 * and a client which repeatedly connects, sends data and receives responses,
 * and then closes the socket.
 *
 * \subsection rdma_skts_known_limitations RMA Sockets Limitations
 *
 * The known limitations of the RMA Sockets implementation are:
 *
 * - The RMA Sockets implementation leaks memory on all actions except
 *   rskt_read and rskt_write.
 * - The RMA Sockets implementation uses synchronous transfers, which 
 *   reduces throughput.
 * - The rskt_flush and rskt_recv interfaces are not supported by the current
 *   release.
 *
 * \page stack_umd_mbox Tsi721 MBOX User Mode Driver 
 *
 * The interface for the Tsi721 MBOX user mode driver (UMD) is 
 * mboxmgr_tsi721.h.  The associated library is 
 * include/libs_a/libmboxmgr.a.  The Tsi721 MBOX UMD
 * gives an application dedicated use of Tsi721 messaging channel 2 or 3,
 * also known as a mailbox.
 * The format and contents of the messages is completely controlled by the
 * application.    
 *
 * Example code for the Tsi721 MBOX UMD is found in 
 * mbox_example.c.  Mbox_example.c implements 
 * mbox_server and mbox_client executables.  The mbox_server receives
 * messages and echos them back to the sending client.  The client sends
 * an endless stream of messages to the target server.  
 *
 * To execute the demo, first start the server, then the client.
 * To start the server, use the following syntax:
 *
 * sudo ./server -m (mp) -c (ch) -b (tx) -f (fin)
 * - mp  - MPORT aka device index -- usually 0
 * - ch  - MBOX channel for mp, values of 2 (default) or 3
 * - tx  - Maximum messages pending for TX/RX, minimum 32.
 * 	More messages means more throughput
 * - fin - Maximum number of messages finished TX/RX.
 * 	Minimum 32, must be a power of 2, maximum is 4096
 *
 * For example: sudo ./mbox_server -m 0 -c 2 -b 256 -f 256
 *
 * To check throughput on the server, use the following command:
 *
 * sudo pkill -SIGUSR1 mbox_server
 *
 * This should result in the following output from the mbox_server:
 *
 * RX_CNT 113412 TX_CNT 113412
 *
 * When the server starts, a number of logs are displayed.  The last log has
 * the form of:
 *
 * INFO Fri May 13 12:34:17 2016.336965us tid=10135 test/mbox_example.c: 198 setup_mailbox():
 *
 *       SERVER my_did=5 my_mbox=2 tgt_did=4294967295 tgt_mbox=2
 *        msg_sz=4096 #buf=256 #fifo=256
 * 
 * The my_did parameter is used when starting the client.
 * To start the client, use the following syntax:
 *
 * sudo ./mbox_client -m (mp) -d (did) -c (ch) -C (CH) -s (sz) -b (tx) -f (fin)
 * - mp  - MPORT aka device index -- usually 0
 * - did - RapidIO destid (8-bit) where the server is running
 *       Taken from the my_did log value above.
 * - ch  - MBOX channel for mp, use 2 (default) or 3
 * - CH  - MBOX channel for the server, use 2 (default) or 3
 * - sz  - Size of messages exchanged, minimum 24, maximum 4096
 * - tx  - Maximum messages pending for TX/RX, minimum 32.
 *       Must be a power of 2, maximum is 4096
 * - fin - Maximum number of messages finished TX/RX.
 *       Minimum 32, Must be a power of 2, maximum is 4096
 *
 * For example: sudo ./mbox_client -m 0 -d 5 -c 2 -C 2 -b 256 -f 256
 *
 * To halt the mbox_client or mbox_client, use (CTRL)c.
 *
 * \page stack_umd_dma Tsi721 DMA User Mode Driver 
 *
 * The Tsi721 DMA user mode driver (UMD) is implemented as a daemon 
 * process.  UMD DMA services are provided transparently through:
 * - rapidio_sw/common/include/rapidio_mport_mgmt.h
 *   - riomp_mgmt_mport_create_handle
 *   - riomp_mgmt_mport_destroy_handle
 * - rapidio_sw/common/include/rapidio_mport_dma.h
 *   - riomp_dma_write_d
 *   - riomp_dma_read_d 
 *   - riomp_dma_wait_async
 *
 * Example code for the Tsi721 DMA UMD is found in 
 * rapidio_sw/common/libmport/samples in the file riodp_test_dma.c.
 *
 * \page stack_dma_tun IP Tunnelling over RapidIO
 *
 * DmaTun is the name of the RRMAP stack component which transports IP 
 * frames transparently over a RapidIO network.  No interface exists for the
 * DmaTun component.  
 *
 * The DmaTun is started by the all_start.sh script.  DmaTun may also be 
 * started without the rest of the RRMAP stack using the dmatun_start.sh 
 * script.  DmaTun creates a network
 * tunnel with IP addresses 10.64.12.(destID) on each node, where (destID) is 
 * is the device ID of the Tsi721 on that node.  Frames address to other
 * nodes with DMA TUN operating are transported over RapidIO to the target
 * node.
 *
 * The iperfbidi.sh and iperfpeers.sh scripts use the standard "iperf" 
 * traffic generation and test tool to demonstrate DmaTun performance.
 *
 * \page stack_fxfr File Transfer Utility
 *
 * The file transfer demonstration is found in the
 * rapidio_sw/utils/file_transfer directory.  It consists of a server
 * process which receives transfered files, and a client command which
 * sends a file to a specified server.
 * 
 * The file transfer server is launched on all nodes of the cluster using the
 * /opt/rapidio/rapidio_sw/fxfr_start.sh script.  The script runs the server
 * using the "screen" utility, which allows users access to the
 * server command prompt.  To connect to the server command prompt, execute
 * the following command on the node where the server is running: 
 * screen -r fxfr_server
 * 
 * The file transfer server process manages up to 8 windows of a
 * configurable size. 
 * Each window can support a single file transfer operation.  Multiple windows
 * can be used at the same time to transfer multiple files in parallel.
 *
 * To transfer a file, type the following command  in the
 * rapidio_sw/utils/file_transfer directory.
 * Note that depending on your system configuration and privileges,
 * this command may need to be run as root:
 *
 * ./rftp (src_file) (dest_file) (destID) (cm_skt) (mport) (dbg) (kbuf) 
 * - src_file – Name of the file to be transferred, along with the path to the
 *              file.
 * - dest_file – Name of the transferred file on the target machine, along 
 *               with the path to the file.
 * - destID – RapidIO destination ID of the target server.
 *            Execute the “mpdevs” command from the server command
 *            prompt to confirm the servers destination ID.
 * 
 *  Note: all parameters below are optional
 * 
 * - cm_skt – RapidIO Channelized Messaging (CM) socket number to connect to.
 *            The eefault value is 5555, and is used by the fxfr_start.sh 
 *            script. . Execute the “status” command from the server command
 *            prompt to display the CM socket number used by that server.
 * - mport – The index of the mport number on the node executing the ./rftp 
 *           command to be used to send the request.
 *           The default mport number is 0. Enter a non-existant (i.e.  0xUA) 
 *           mport number to display the (mport) values available on the 
 *           local node, 
 *           and the (destID) values where servers may be running.
 * - dbg – A non-zero dbg value displays error/debug/trace messages
 *            for the file transfer.   This can be useful when learning the
 *            file transfer implementation.
 * - kbuf – The rftp command may use user allocated memory, or kernel buffer
 *          memory, to transfer the files.  Kernel buffers are physically 
 *          contiguous memory, which support transfers using a single DMA 
 *          transaction leading to higher performance;
 *          User allocated memory is not physically contiguous, and so can
 *          result in many smaller 4K DMA transactions and lower performance.
 *           Rftp uses kernel memory by default..  
 *
 * Entering ./rftp with no parameters displays a message describing the
 * above syntax.
 *
 * The rftp client performs the file transfer and reports
 * elapsed time for the transfer, along with average throughput.  Note that
 * throughput is usually constrained by file system performance.
 *
 */
