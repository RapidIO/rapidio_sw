/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RDMAD_H_RPCGEN
#define _RDMAD_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef uint64_t ms_h;

struct get_mport_id_input {
	int dummy;
};
typedef struct get_mport_id_input get_mport_id_input;

struct get_mport_id_output {
	int mport_id;
	int status;
};
typedef struct get_mport_id_output get_mport_id_output;

struct create_mso_input {
	char *owner_name;
};
typedef struct create_mso_input create_mso_input;

struct create_mso_output {
	uint32_t msoid;
	int status;
};
typedef struct create_mso_output create_mso_output;

struct open_mso_input {
	char *owner_name;
};
typedef struct open_mso_input open_mso_input;

struct open_mso_output {
	uint32_t msoid;
	uint32_t mso_conn_id;
	int status;
};
typedef struct open_mso_output open_mso_output;

struct close_mso_input {
	uint32_t msoid;
	uint32_t mso_conn_id;
};
typedef struct close_mso_input close_mso_input;

struct close_mso_output {
	int status;
};
typedef struct close_mso_output close_mso_output;

struct destroy_mso_input {
	uint32_t msoid;
};
typedef struct destroy_mso_input destroy_mso_input;

struct destroy_mso_output {
	int status;
};
typedef struct destroy_mso_output destroy_mso_output;

struct create_ms_input {
	char *ms_name;
	uint32_t msoid;
	uint32_t bytes;
	uint32_t flags;
};
typedef struct create_ms_input create_ms_input;

struct create_ms_output {
	uint32_t msid;
	int status;
};
typedef struct create_ms_output create_ms_output;

struct open_ms_input {
	char *ms_name;
	uint32_t msoid;
	uint32_t flags;
};
typedef struct open_ms_input open_ms_input;

struct open_ms_output {
	uint32_t msid;
	uint32_t ms_conn_id;
	uint32_t bytes;
	int status;
};
typedef struct open_ms_output open_ms_output;

struct close_ms_input {
	uint32_t msid;
	uint32_t ms_conn_id;
};
typedef struct close_ms_input close_ms_input;

struct close_ms_output {
	int status;
};
typedef struct close_ms_output close_ms_output;

struct destroy_ms_input {
	uint32_t msoid;
	uint32_t msid;
};
typedef struct destroy_ms_input destroy_ms_input;

struct destroy_ms_output {
	int status;
};
typedef struct destroy_ms_output destroy_ms_output;

struct create_msub_input {
	uint32_t msid;
	uint32_t offset;
	uint32_t req_bytes;
};
typedef struct create_msub_input create_msub_input;

struct create_msub_output {
	int status;
	uint32_t msubid;
	uint32_t bytes;
	uint64_t rio_addr;
	uint64_t phys_addr;
};
typedef struct create_msub_output create_msub_output;

struct destroy_msub_input {
	uint32_t msid;
	uint32_t msubid;
};
typedef struct destroy_msub_input destroy_msub_input;

struct destroy_msub_output {
	int status;
};
typedef struct destroy_msub_output destroy_msub_output;

struct accept_input {
	char *loc_ms_name;
	uint32_t loc_msid;
	uint32_t loc_msubid;
	uint32_t loc_bytes;
	uint8_t loc_rio_addr_len;
	uint64_t loc_rio_addr_lo;
	uint8_t loc_rio_addr_hi;
};
typedef struct accept_input accept_input;

struct accept_output {
	int status;
};
typedef struct accept_output accept_output;

struct undo_accept_input {
	char *server_ms_name;
};
typedef struct undo_accept_input undo_accept_input;

struct undo_accept_output {
	int status;
};
typedef struct undo_accept_output undo_accept_output;

struct send_connect_input {
	char *server_msname;
	uint8_t server_destid_len;
	uint32_t server_destid;
	uint8_t client_destid_len;
	uint32_t client_destid;
	uint32_t client_msid;
	uint32_t client_msubid;
	uint32_t client_bytes;
	uint8_t client_rio_addr_len;
	uint64_t client_rio_addr_lo;
	uint8_t client_rio_addr_hi;
};
typedef struct send_connect_input send_connect_input;

struct send_connect_output {
	int status;
};
typedef struct send_connect_output send_connect_output;

struct undo_connect_input {
	char *server_ms_name;
};
typedef struct undo_connect_input undo_connect_input;

struct undo_connect_output {
	int status;
};
typedef struct undo_connect_output undo_connect_output;

struct send_disconnect_input {
	uint32_t loc_msubid;
	uint32_t rem_msid;
	uint32_t rem_destid_len;
	uint32_t rem_destid;
};
typedef struct send_disconnect_input send_disconnect_input;

struct send_disconnect_output {
	int status;
};
typedef struct send_disconnect_output send_disconnect_output;

#define RDMAD 0x51502112
#define RDMAD_1 1

#if defined(__STDC__) || defined(__cplusplus)
#define CREATE_MSO 1
extern  create_mso_output * create_mso_1(create_mso_input *, CLIENT *);
extern  create_mso_output * create_mso_1_svc(create_mso_input *, struct svc_req *);
#define DESTROY_MSO 2
extern  destroy_mso_output * destroy_mso_1(destroy_mso_input *, CLIENT *);
extern  destroy_mso_output * destroy_mso_1_svc(destroy_mso_input *, struct svc_req *);
#define CREATE_MS 3
extern  create_ms_output * create_ms_1(create_ms_input *, CLIENT *);
extern  create_ms_output * create_ms_1_svc(create_ms_input *, struct svc_req *);
#define DESTROY_MS 4
extern  destroy_ms_output * destroy_ms_1(destroy_ms_input *, CLIENT *);
extern  destroy_ms_output * destroy_ms_1_svc(destroy_ms_input *, struct svc_req *);
#define CREATE_MSUB 5
extern  create_msub_output * create_msub_1(create_msub_input *, CLIENT *);
extern  create_msub_output * create_msub_1_svc(create_msub_input *, struct svc_req *);
#define DESTROY_MSUB 6
extern  destroy_msub_output * destroy_msub_1(destroy_msub_input *, CLIENT *);
extern  destroy_msub_output * destroy_msub_1_svc(destroy_msub_input *, struct svc_req *);
#define ACCEPT 7
extern  accept_output * accept_1(accept_input *, CLIENT *);
extern  accept_output * accept_1_svc(accept_input *, struct svc_req *);
#define SEND_CONNECT 8
extern  send_connect_output * send_connect_1(send_connect_input *, CLIENT *);
extern  send_connect_output * send_connect_1_svc(send_connect_input *, struct svc_req *);
#define GET_MPORT_ID 9
extern  get_mport_id_output * get_mport_id_1(get_mport_id_input *, CLIENT *);
extern  get_mport_id_output * get_mport_id_1_svc(get_mport_id_input *, struct svc_req *);
#define SEND_DISCONNECT 10
extern  send_disconnect_output * send_disconnect_1(send_disconnect_input *, CLIENT *);
extern  send_disconnect_output * send_disconnect_1_svc(send_disconnect_input *, struct svc_req *);
#define OPEN_MSO 11
extern  open_mso_output * open_mso_1(open_mso_input *, CLIENT *);
extern  open_mso_output * open_mso_1_svc(open_mso_input *, struct svc_req *);
#define CLOSE_MSO 12
extern  close_mso_output * close_mso_1(close_mso_input *, CLIENT *);
extern  close_mso_output * close_mso_1_svc(close_mso_input *, struct svc_req *);
#define OPEN_MS 13
extern  open_ms_output * open_ms_1(open_ms_input *, CLIENT *);
extern  open_ms_output * open_ms_1_svc(open_ms_input *, struct svc_req *);
#define CLOSE_MS 14
extern  close_ms_output * close_ms_1(close_ms_input *, CLIENT *);
extern  close_ms_output * close_ms_1_svc(close_ms_input *, struct svc_req *);
#define UNDO_ACCEPT 15
extern  undo_accept_output * undo_accept_1(undo_accept_input *, CLIENT *);
extern  undo_accept_output * undo_accept_1_svc(undo_accept_input *, struct svc_req *);
#define UNDO_CONNECT 16
extern  undo_connect_output * undo_connect_1(undo_connect_input *, CLIENT *);
extern  undo_connect_output * undo_connect_1_svc(undo_connect_input *, struct svc_req *);
extern int rdmad_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CREATE_MSO 1
extern  create_mso_output * create_mso_1();
extern  create_mso_output * create_mso_1_svc();
#define DESTROY_MSO 2
extern  destroy_mso_output * destroy_mso_1();
extern  destroy_mso_output * destroy_mso_1_svc();
#define CREATE_MS 3
extern  create_ms_output * create_ms_1();
extern  create_ms_output * create_ms_1_svc();
#define DESTROY_MS 4
extern  destroy_ms_output * destroy_ms_1();
extern  destroy_ms_output * destroy_ms_1_svc();
#define CREATE_MSUB 5
extern  create_msub_output * create_msub_1();
extern  create_msub_output * create_msub_1_svc();
#define DESTROY_MSUB 6
extern  destroy_msub_output * destroy_msub_1();
extern  destroy_msub_output * destroy_msub_1_svc();
#define ACCEPT 7
extern  accept_output * accept_1();
extern  accept_output * accept_1_svc();
#define SEND_CONNECT 8
extern  send_connect_output * send_connect_1();
extern  send_connect_output * send_connect_1_svc();
#define GET_MPORT_ID 9
extern  get_mport_id_output * get_mport_id_1();
extern  get_mport_id_output * get_mport_id_1_svc();
#define SEND_DISCONNECT 10
extern  send_disconnect_output * send_disconnect_1();
extern  send_disconnect_output * send_disconnect_1_svc();
#define OPEN_MSO 11
extern  open_mso_output * open_mso_1();
extern  open_mso_output * open_mso_1_svc();
#define CLOSE_MSO 12
extern  close_mso_output * close_mso_1();
extern  close_mso_output * close_mso_1_svc();
#define OPEN_MS 13
extern  open_ms_output * open_ms_1();
extern  open_ms_output * open_ms_1_svc();
#define CLOSE_MS 14
extern  close_ms_output * close_ms_1();
extern  close_ms_output * close_ms_1_svc();
#define UNDO_ACCEPT 15
extern  undo_accept_output * undo_accept_1();
extern  undo_accept_output * undo_accept_1_svc();
#define UNDO_CONNECT 16
extern  undo_connect_output * undo_connect_1();
extern  undo_connect_output * undo_connect_1_svc();
extern int rdmad_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_ms_h (XDR *, ms_h*);
extern  bool_t xdr_get_mport_id_input (XDR *, get_mport_id_input*);
extern  bool_t xdr_get_mport_id_output (XDR *, get_mport_id_output*);
extern  bool_t xdr_create_mso_input (XDR *, create_mso_input*);
extern  bool_t xdr_create_mso_output (XDR *, create_mso_output*);
extern  bool_t xdr_open_mso_input (XDR *, open_mso_input*);
extern  bool_t xdr_open_mso_output (XDR *, open_mso_output*);
extern  bool_t xdr_close_mso_input (XDR *, close_mso_input*);
extern  bool_t xdr_close_mso_output (XDR *, close_mso_output*);
extern  bool_t xdr_destroy_mso_input (XDR *, destroy_mso_input*);
extern  bool_t xdr_destroy_mso_output (XDR *, destroy_mso_output*);
extern  bool_t xdr_create_ms_input (XDR *, create_ms_input*);
extern  bool_t xdr_create_ms_output (XDR *, create_ms_output*);
extern  bool_t xdr_open_ms_input (XDR *, open_ms_input*);
extern  bool_t xdr_open_ms_output (XDR *, open_ms_output*);
extern  bool_t xdr_close_ms_input (XDR *, close_ms_input*);
extern  bool_t xdr_close_ms_output (XDR *, close_ms_output*);
extern  bool_t xdr_destroy_ms_input (XDR *, destroy_ms_input*);
extern  bool_t xdr_destroy_ms_output (XDR *, destroy_ms_output*);
extern  bool_t xdr_create_msub_input (XDR *, create_msub_input*);
extern  bool_t xdr_create_msub_output (XDR *, create_msub_output*);
extern  bool_t xdr_destroy_msub_input (XDR *, destroy_msub_input*);
extern  bool_t xdr_destroy_msub_output (XDR *, destroy_msub_output*);
extern  bool_t xdr_accept_input (XDR *, accept_input*);
extern  bool_t xdr_accept_output (XDR *, accept_output*);
extern  bool_t xdr_undo_accept_input (XDR *, undo_accept_input*);
extern  bool_t xdr_undo_accept_output (XDR *, undo_accept_output*);
extern  bool_t xdr_send_connect_input (XDR *, send_connect_input*);
extern  bool_t xdr_send_connect_output (XDR *, send_connect_output*);
extern  bool_t xdr_undo_connect_input (XDR *, undo_connect_input*);
extern  bool_t xdr_undo_connect_output (XDR *, undo_connect_output*);
extern  bool_t xdr_send_disconnect_input (XDR *, send_disconnect_input*);
extern  bool_t xdr_send_disconnect_output (XDR *, send_disconnect_output*);

#else /* K&R C */
extern bool_t xdr_ms_h ();
extern bool_t xdr_get_mport_id_input ();
extern bool_t xdr_get_mport_id_output ();
extern bool_t xdr_create_mso_input ();
extern bool_t xdr_create_mso_output ();
extern bool_t xdr_open_mso_input ();
extern bool_t xdr_open_mso_output ();
extern bool_t xdr_close_mso_input ();
extern bool_t xdr_close_mso_output ();
extern bool_t xdr_destroy_mso_input ();
extern bool_t xdr_destroy_mso_output ();
extern bool_t xdr_create_ms_input ();
extern bool_t xdr_create_ms_output ();
extern bool_t xdr_open_ms_input ();
extern bool_t xdr_open_ms_output ();
extern bool_t xdr_close_ms_input ();
extern bool_t xdr_close_ms_output ();
extern bool_t xdr_destroy_ms_input ();
extern bool_t xdr_destroy_ms_output ();
extern bool_t xdr_create_msub_input ();
extern bool_t xdr_create_msub_output ();
extern bool_t xdr_destroy_msub_input ();
extern bool_t xdr_destroy_msub_output ();
extern bool_t xdr_accept_input ();
extern bool_t xdr_accept_output ();
extern bool_t xdr_undo_accept_input ();
extern bool_t xdr_undo_accept_output ();
extern bool_t xdr_send_connect_input ();
extern bool_t xdr_send_connect_output ();
extern bool_t xdr_undo_connect_input ();
extern bool_t xdr_undo_connect_output ();
extern bool_t xdr_send_disconnect_input ();
extern bool_t xdr_send_disconnect_output ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RDMAD_H_RPCGEN */
